#include <stdio.h>

typedef struct {
    int processId;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int startTime;
    int waitTime;
    int turnaroundTime;
} Process;

void roundRobin(Process processes[], int n, int quantum) {
    int completed = 0;
    int currentTime = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                int executeTime = (processes[i].remainingTime > quantum) ? quantum : processes[i].remainingTime;
                processes[i].remainingTime -= executeTime;
                currentTime += executeTime;

                printf("Process %d executed for %d units. Current time: %d\n", processes[i].processId, executeTime, currentTime);

                if (processes[i].remainingTime == 0) {
                    completed++;
                    processes[i].turnaroundTime = currentTime - processes[i].arrivalTime;
                }
            }
        }
    }

    // Compute average wait time and average turnaround time
    int totalWaitTime = 0;
    int totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        processes[i].waitTime = processes[i].turnaroundTime - processes[i].burstTime;
        totalWaitTime += processes[i].waitTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }

    float avgWaitTime = (float)totalWaitTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;

    printf("\nAverage Wait Time: %.2f\n", avgWaitTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

void shortestRemainingTime(Process processes[], int n) {
    int completed = 0;
    int currentTime = 0;

    while (completed < n) {
        int shortest = -1;
        int shortestTime = 9999;

        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0 && processes[i].remainingTime < shortestTime) {
                shortest = i;
                shortestTime = processes[i].remainingTime;
            }
        }

        if (shortest != -1) {
            processes[shortest].remainingTime--;
            currentTime++;

            printf("Process %d executed for 1 unit. Current time: %d\n", processes[shortest].processId, currentTime);

            if (processes[shortest].remainingTime == 0) {
                completed++;
                processes[shortest].turnaroundTime = currentTime - processes[shortest].arrivalTime;
            }
        }
    }

    // Compute average wait time and average turnaround time
    int totalWaitTime = 0;
    int totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        processes[i].waitTime = processes[i].turnaroundTime - processes[i].burstTime;
        totalWaitTime += processes[i].waitTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }

    float avgWaitTime = (float)totalWaitTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;

    printf("\nAverage Wait Time: %.2f\n", avgWaitTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);

        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);

        processes[i].processId = i + 1;
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].startTime = -1;
        processes[i].waitTime = 0;
        processes[i].turnaroundTime = 0;
    }

    printf("\nChoose the scheduling algorithm:\n");
    printf("1. Round Robin\n");
    printf("2. Shortest Remaining Time (SRT)\n");
    printf("Enter your choice: ");

    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("\nEnter the time quantum: ");
            scanf("%d", &quantum);
            printf("\nRound Robin Scheduling:\n");
            roundRobin(processes, n, quantum);
            break;
        case 2:
            printf("\nShortest Remaining Time (SRT) Scheduling:\n");
            shortestRemainingTime(processes, n);
            break;
        default:
            printf("\nInvalid choice!\n");
            return 1;
    }

    return 0;
}
